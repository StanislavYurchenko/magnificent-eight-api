{
  "openapi": "3.0.1",
  "info": {
    "title": "QA Test Service",
    "description": "This is a server descriptions for QA Test Application by Magnificent Team",
    "version": "1.0.2"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [
    {
      "url": "https://qa-test-api-hakaton2021goit.herokuapp.com",
      "description": "Base URL"
    },
    {
      "url": "http://localhost:5002",
      "description": "Test URL"
    }
  ],
  "tags": [
    {
      "name": "User"
    },
    {
      "name": "Test"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["User"],
        "summary": "Create user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Conflict. User with such email is already exist"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["User"],
        "summary": "Logs user into the system",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User is logged in"
          },
          "400": {
            "description": "Invalid email / password supplied"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["User"],
        "summary": "Logs out current logged in user session",
        "description": "This can only be done by the logged in user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token issued to the current user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is logged out"
          },
          "403": {
            "description": "Forbidden. User is not logged in"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/test-tech": {
      "get": {
        "tags": ["Test"],
        "summary": "Get the new series of technical tests",
        "description": "This can only be done by the logged in user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token issued to the current user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tests received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User is not logged in"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/test-theory": {
      "get": {
        "tags": ["Test"],
        "summary": "Get the new series of theoretical tests",
        "description": "This can only be done by the logged in user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token issued to the current user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tests received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User is not logged in"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/test-tech/result": {
      "post": {
        "tags": ["Test"],
        "summary": "Get correct answers for technical tests",
        "description": "This can only be done by the logged in user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token issued to the current user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForAnswers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User is not logged in"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/test-theory/result": {
      "post": {
        "tags": ["Test"],
        "summary": "Get correct answers for theoretical tests",
        "description": "This can only be done by the logged in user.",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Token issued to the current user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestForAnswers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Result received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User is not logged in"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterUser": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "name": "Ivan Ivanov",
          "email": "iivanov@mail.com",
          "password": "examplepassword"
        }
      },
      "LoginUser": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "email": "iivanov@mail.com",
          "password": "examplepassword"
        }
      },
      "Test": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer"
          },
          "question": {
            "type": "string"
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": "['apple', 'orange', 'banana']"
          },
          "rightAnswer": {
            "type": "string"
          }
        }
      },
      "TestsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "questionId": {
              "type": "integer"
            },
            "question": {
              "type": "string"
            },
            "answers": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "example": [
          {
            "questionId": 1,
            "question": "Choose citrus fruit",
            "answers": "['apple', 'orange', 'banana']"
          },
          {
            "questionId": 2,
            "question": "What number is bigger",
            "answers": "['1', '2', '3']"
          }
        ]
      },
      "RequestForAnswers": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["questionId", "answer"],
          "properties": {
            "questionId": {
              "type": "integer"
            },
            "answer": {
              "type": "string"
            }
          }
        },
        "example": [
          {
            "questionId": 1,
            "answer": "orange"
          },
          {
            "questionId": 2,
            "answer": "2"
          }
        ]
      },
      "ResultsResponse": {
        "type": "object",
        "properties": {
          "correct": {
            "type": "integer"
          },
          "wrong": {
            "type": "integer"
          }
        },
        "example": {
          "correct": 10,
          "wrong": 2
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
